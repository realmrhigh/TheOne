Index: app/src/main/java/com/high/theone/MainActivity.kt
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package com.high.theone\r\n\r\nimport android.os.Bundle\r\nimport androidx.activity.ComponentActivity\r\nimport androidx.activity.compose.setContent\r\nimport androidx.activity.enableEdgeToEdge\r\nimport androidx.compose.foundation.layout.fillMaxSize\r\nimport androidx.compose.foundation.layout.padding\r\nimport androidx.compose.material3.MaterialTheme // Added for Surface\r\nimport androidx.compose.material3.Scaffold // Keep existing imports if not conflicting\r\nimport androidx.compose.material3.Surface // Added for Surface\r\nimport androidx.compose.material3.Text\r\nimport androidx.compose.runtime.Composable\r\nimport androidx.compose.ui.Modifier\r\nimport androidx.compose.ui.tooling.preview.Preview\r\nimport androidx.compose.ui.unit.dp // Import for dp unit\r\nimport com.high.theone.ui.theme.TheOneTheme\r\nimport com.example.theone.audio.AudioEngine // Import for AudioEngine\r\nimport com.example.theone.audio.AudioEngine // Import for AudioEngine\r\nimport kotlinx.coroutines.CoroutineScope\r\nimport kotlinx.coroutines.Dispatchers\r\nimport kotlinx.coroutines.launch\r\nimport android.util.Log // Already present but good to ensure\r\nimport kotlinx.coroutines.delay // For non-blocking delays\r\nimport java.io.File // Already present\r\nimport java.io.FileOutputStream // Already present\r\nimport java.io.IOException // Already present\r\nimport android.Manifest // For permission string\r\nimport androidx.core.content.ContextCompat\r\nimport android.content.pm.PackageManager\r\n\r\nclass MainActivity : ComponentActivity() {\r\n\r\n    private lateinit var audioEngine: AudioEngine\r\n\r\n    override fun onCreate(savedInstanceState: Bundle?) {\r\n        super.onCreate(savedInstanceState)\r\n        enableEdgeToEdge() // Keep this if it was there\r\n\r\n        audioEngine = AudioEngine()\r\n\r\n        Log.i(\"MainActivity\", \"Launching coroutine for AudioEngine initialization...\")\r\n        // Launch a coroutine for a suspend function\r\n        CoroutineScope(Dispatchers.Main).launch { // Use Dispatchers.Main if UI updates are needed, IO for background\r\n            try {\r\n                // Using Dispatchers.IO for the actual blocking call if needed,\r\n                // but initialize itself is suspend, so it handles its own threading if implemented with withContext(Dispatchers.IO)\r\n                val initResult = audioEngine.initialize(sampleRate = 48000, bufferSize = 256, enableLowLatency = true)\r\n                android.util.Log.i(\"MainActivity\", \"AudioEngine.initialize() returned: $initResult\")\r\n                if (initResult) {\r\n                    android.util.Log.i(\"MainActivity\", \"AudioEngine isInitialized after init: ${audioEngine.isInitialized()}\")\r\n                    android.util.Log.i(\"MainActivity\", \"AudioEngine Latency: ${audioEngine.getReportedLatencyMillis()} ms\")\r\n                    // You can update UI here if needed, e.g., with a LaunchedEffect if in Composable\r\n\r\n                    // Define Metronome Sound IDs\r\n                    val primaryClickId = \"__METRONOME_PRIMARY__\"\r\n                    val secondaryClickId = \"__METRONOME_SECONDARY__\"\r\n                    val primaryAssetName = \"click_primary.wav\"\r\n                    val secondaryAssetName = \"click_secondary.wav\"\r\n\r\n                    // Load Primary Click Sound\r\n                    android.util.Log.i(\"MainActivity\", \"Pre-loading primary metronome click sound...\")\r\n                    val primaryCachedPath = copyAssetToCache(applicationContext, primaryAssetName, \"cached_click_primary.wav\")\r\n                    if (primaryCachedPath != null) {\r\n                        val primaryFileUri = \"file://$primaryCachedPath\"\r\n                        val primaryLoadSuccess = audioEngine.loadSampleToMemory(applicationContext, primaryClickId, primaryFileUri)\r\n                        android.util.Log.i(\"MainActivity\", \"Loading $primaryClickId ($primaryAssetName) result: $primaryLoadSuccess. URI: $primaryFileUri\")\r\n                        if (!primaryLoadSuccess) android.util.Log.e(\"MainActivity\", \"Failed to load $primaryClickId\")\r\n                    } else {\r\n                        android.util.Log.e(\"MainActivity\", \"Failed to copy $primaryAssetName to cache.\")\r\n                    }\r\n\r\n                    // Load Secondary Click Sound\r\n                    android.util.Log.i(\"MainActivity\", \"Pre-loading secondary metronome click sound...\")\r\n                    val secondaryCachedPath = copyAssetToCache(applicationContext, secondaryAssetName, \"cached_click_secondary.wav\")\r\n                    if (secondaryCachedPath != null) {\r\n                        val secondaryFileUri = \"file://$secondaryCachedPath\"\r\n                        val secondaryLoadSuccess = audioEngine.loadSampleToMemory(applicationContext, secondaryClickId, secondaryFileUri)\r\n                        android.util.Log.i(\"MainActivity\", \"Loading $secondaryClickId ($secondaryAssetName) result: $secondaryLoadSuccess. URI: $secondaryFileUri\")\r\n                        if (!secondaryLoadSuccess) android.util.Log.e(\"MainActivity\", \"Failed to load $secondaryClickId\")\r\n                    } else {\r\n                        android.util.Log.e(\"MainActivity\", \"Failed to copy $secondaryAssetName to cache.\")\r\n                    }\r\n\r\n                    // Assuming primaryLoadSuccess and secondaryLoadSuccess would be checked for real sounds.\r\n                    // For dummy sounds, we proceed regardless for testing the metronome logic.\r\n                    Log.i(\"MainActivity\", \"Metronome sounds loading attempted. Proceeding to test metronome.\")\r\n\r\n                    // Test Metronome\r\n                    audioEngine.setMetronomeVolume(0.8f) // Set volume first\r\n                    Log.i(\"MainActivity\", \"Enabling metronome at 120 BPM, 4/4.\")\r\n                    audioEngine.setMetronomeState(\r\n                        isEnabled = true,\r\n                        bpm = 120.0f,\r\n                        timeSignatureNum = 4,\r\n                        timeSignatureDen = 4,\r\n                        primarySoundSampleId = primaryClickId,\r\n                        secondarySoundSampleId = secondaryClickId\r\n                    )\r\n\r\n                    delay(5000) // Let it run for 5 seconds\r\n\r\n                    Log.i(\"MainActivity\", \"Changing metronome BPM to 180.\")\r\n                    audioEngine.setMetronomeState(\r\n                        isEnabled = true, // Keep it enabled\r\n                        bpm = 180.0f,\r\n                        timeSignatureNum = 4,\r\n                        timeSignatureDen = 4,\r\n                        primarySoundSampleId = primaryClickId,\r\n                        secondarySoundSampleId = secondaryClickId\r\n                    )\r\n\r\n                    delay(5000) // Let it run for 5 seconds\r\n\r\n                    Log.i(\"MainActivity\", \"Changing metronome time signature to 3/4, BPM 120.\")\r\n                    audioEngine.setMetronomeState(\r\n                        isEnabled = true, // Keep it enabled\r\n                        bpm = 120.0f,\r\n                        timeSignatureNum = 3,\r\n                        timeSignatureDen = 4,\r\n                        primarySoundSampleId = primaryClickId,\r\n                        secondarySoundSampleId = secondaryClickId\r\n                    )\r\n\r\n                    delay(5000) // Let it run for 5 seconds\r\n\r\n                    Log.i(\"MainActivity\", \"Disabling metronome.\")\r\n                    audioEngine.setMetronomeState(\r\n                        isEnabled = false,\r\n                        bpm = 120.0f, // These values don't matter much when disabling\r\n                        timeSignatureNum = 3,\r\n                        timeSignatureDen = 4,\r\n                        primarySoundSampleId = primaryClickId,\r\n                        secondarySoundSampleId = secondaryClickId\r\n                    )\r\n\r\n                    delay(2000) // Delay 2 seconds to confirm it's off\r\n\r\n                    Log.i(\"MainActivity\", \"Re-enabling metronome at 60 BPM, 4/4.\")\r\n                    audioEngine.setMetronomeState(\r\n                        isEnabled = true,\r\n                        bpm = 60.0f,\r\n                        timeSignatureNum = 4,\r\n                        timeSignatureDen = 4,\r\n                        primarySoundSampleId = primaryClickId,\r\n                        secondarySoundSampleId = secondaryClickId\r\n                    )\r\n                    // Metronome will run until app is closed or engine is shut down.\r\n                    // End of Metronome Test section\r\n\r\n\r\n                    // Test Audio Recording\r\n                    Log.i(\"MainActivity\", \"--- Starting Audio Recording Test ---\")\r\n\r\n                    if (ContextCompat.checkSelfPermission(this@MainActivity, Manifest.permission.RECORD_AUDIO) != PackageManager.PERMISSION_GRANTED) {\r\n                        Log.e(\"MainActivity\", \"RECORD_AUDIO permission not granted. Skipping recording test.\")\r\n                    } else {\r\n                        Log.i(\"MainActivity\", \"RECORD_AUDIO permission granted.\")\r\n                        val recordFileName = \"test_recording.wav\"\r\n                        val recordFile = File(cacheDir, recordFileName)\r\n                        val recordFileUriString = \"file://${recordFile.absolutePath}\"\r\n\r\n                        val recordingSampleRate = 48000\r\n                        val recordingChannels = 1 // Mono\r\n\r\n                        Log.i(\"MainActivity\", \"Attempting to start recording to: $recordFileUriString\")\r\n                        val startSuccess = audioEngine.startAudioRecording(\r\n                            context = applicationContext,\r\n                            filePathUri = recordFileUriString,\r\n                            sampleRate = recordingSampleRate,\r\n                            channels = recordingChannels\r\n                        )\r\n                        Log.i(\"MainActivity\", \"startAudioRecording result: $startSuccess\")\r\n\r\n                        if (startSuccess) {\r\n                            Log.i(\"MainActivity\", \"Recording started. Will record for ~5 seconds.\")\r\n                            var peakSum = 0.0f\r\n                            var peakCount = 0\r\n                            for (i in 1..50) {\r\n                                delay(100)\r\n                                val isActive = audioEngine.isRecordingActive()\r\n                                val peak = audioEngine.getRecordingLevelPeak()\r\n                                peakSum += peak\r\n                                peakCount++\r\n                                Log.d(\"MainActivity\", \"Recording active: $isActive, Current Peak: $peak\")\r\n                                if (!isActive && i < 40) {\r\n                                    Log.e(\"MainActivity\", \"Recording stopped unexpectedly earlier than 5s loop.\")\r\n                                    break\r\n                                }\r\n                            }\r\n                            if (peakCount > 0 && peakSum == 0.0f && audioEngine.isRecordingActive()) {\r\n                                Log.w(\"MainActivity\", \"Warning: Recording seems active but peak levels are consistently 0.0. Check microphone input / emulator settings.\")\r\n                            }\r\n\r\n                            Log.i(\"MainActivity\", \"Stopping recording...\")\r\n                            val recordedSampleMetadata = audioEngine.stopAudioRecording()\r\n\r\n                            if (recordedSampleMetadata != null) {\r\n                                Log.i(\"MainActivity\", \"stopAudioRecording successful. Metadata: $recordedSampleMetadata\")\r\n                                Log.i(\"MainActivity\", \"Recorded file should be at: ${recordedSampleMetadata.filePathUri}\")\r\n\r\n                                val actualFile = File(recordFile.absolutePath)\r\n                                if (actualFile.exists() && actualFile.length() > 0) {\r\n                                    Log.i(\"MainActivity\", \"Verified: Recording file exists and is not empty. Size: ${actualFile.length()} bytes.\")\r\n\r\n                                    val playbackId = \"playbackOfRecording\"\r\n                                    Log.i(\"MainActivity\", \"Attempting to load recorded sample: ${recordedSampleMetadata.filePathUri}\")\r\n                                    val loadRecordedSuccess = audioEngine.loadSampleToMemory(\r\n                                        applicationContext,\r\n                                        playbackId,\r\n                                        recordedSampleMetadata.filePathUri\r\n                                    )\r\n                                    Log.i(\"MainActivity\", \"loadSampleToMemory for recorded sample result: $loadRecordedSuccess\")\r\n\r\n                                    if (loadRecordedSuccess) {\r\n                                        val isPlaybackLoaded = audioEngine.isSampleLoaded(playbackId)\r\n                                        Log.i(\"MainActivity\", \"isSampleLoaded($playbackId) after load: $isPlaybackLoaded\")\r\n                                        if (isPlaybackLoaded) {\r\n                                            Log.i(\"MainActivity\", \"Playing back recorded sample...\")\r\n                                            val playRecordedSuccess = audioEngine.playSample(playbackId, \"rec_instance_1\", 1.0f, 0.0f)\r\n                                            Log.i(\"MainActivity\", \"playSample for recorded sample result: $playRecordedSuccess\")\r\n\r\n                                            delay(recordedSampleMetadata.durationMs + 500)\r\n\r\n                                            audioEngine.unloadSample(playbackId)\r\n                                            Log.i(\"MainActivity\", \"Unloaded $playbackId\")\r\n                                        }\r\n                                    } else {\r\n                                         Log.e(\"MainActivity\", \"Failed to load the recorded sample for playback.\")\r\n                                    }\r\n\r\n                                } else {\r\n                                    Log.e(\"MainActivity\", \"Error: Recording file not found or is empty at ${recordFile.absolutePath}. Size: ${actualFile.length()}\")\r\n                                }\r\n                            } else {\r\n                                Log.e(\"MainActivity\", \"stopAudioRecording failed or returned null metadata.\")\r\n                            }\r\n                        } else {\r\n                            Log.e(\"MainActivity\", \"Failed to start recording. Check logs for native errors.\")\r\n                        }\r\n                    }\r\n                    Log.i(\"MainActivity\", \"--- Audio Recording Test Finished ---\")\r\n\r\n                    // Test sample loading (original test.wav) - can proceed after metronome tests or in parallel if desired\r\n                    android.util.Log.i(\"MainActivity\", \"Proceeding to test general sample loading (test.wav).\")\r\n                    val sampleId = \"testSampleWav\" // Original test sample\r\n                    val assetName = \"test.wav\"\r\n\r\n                    val cachedFilePath = copyAssetToCache(applicationContext, assetName, \"cached_test.wav\")\r\n\r\n                    if (cachedFilePath != null) {\r\n                        val fileUriString = \"file://$cachedFilePath\"\r\n                        android.util.Log.i(\"MainActivity\", \"Testing loadSampleToMemory with URI: $fileUriString for $sampleId\")\r\n\r\n                        // This launch block was inside the previous if(initResult), so it's fine.\r\n                        // If it was outside, it would need its own CoroutineScope.\r\n                        // For this subtask, we are placing this inside the same CoroutineScope(Dispatchers.Main).launch\r\n                        // as the initResult check.\r\n\r\n                        val loadSuccess = audioEngine.loadSampleToMemory(applicationContext, sampleId, fileUriString)\r\n                        android.util.Log.i(\"MainActivity\", \"loadSampleToMemory($sampleId) result: $loadSuccess\")\r\n\r\n                        if (loadSuccess) {\r\n                                val isLoaded = audioEngine.isSampleLoaded(sampleId)\r\n                                android.util.Log.i(\"MainActivity\", \"isSampleLoaded($sampleId) after load: $isLoaded\")\r\n\r\n                                if (isLoaded) {\r\n                                    android.util.Log.i(\"MainActivity\", \"Attempting to play sample $sampleId (instance_1)...\")\r\n                                    val play1Success = audioEngine.playSample(sampleId = sampleId, noteInstanceId = \"instance_1\", volume = 0.8f, pan = 0.0f)\r\n                                    android.util.Log.i(\"MainActivity\", \"playSample($sampleId, instance_1) result: $play1Success\")\r\n\r\n                                    delay(500) // Delay 500 ms\r\n\r\n                                    android.util.Log.i(\"MainActivity\", \"Attempting to play sample $sampleId (instance_2) panned left...\")\r\n                                    val play2Success = audioEngine.playSample(sampleId = sampleId, noteInstanceId = \"instance_2\", volume = 0.7f, pan = -0.8f)\r\n                                    android.util.Log.i(\"MainActivity\", \"playSample($sampleId, instance_2) result: $play2Success\")\r\n\r\n                                    delay(500)\r\n\r\n                                    android.util.Log.i(\"MainActivity\", \"Attempting to play sample $sampleId (instance_3) panned right...\")\r\n                                    val play3Success = audioEngine.playSample(sampleId = sampleId, noteInstanceId = \"instance_3\", volume = 0.7f, pan = 0.8f)\r\n                                    android.util.Log.i(\"MainActivity\", \"playSample($sampleId, instance_3) result: $play3Success\")\r\n\r\n                                } else {\r\n                                    android.util.Log.e(\"MainActivity\", \"Sample $sampleId was reported as not loaded after load attempt. Cannot play.\")\r\n                                }\r\n\r\n                                // Unload after some delay to let sounds play\r\n                                delay(2000) // Wait 2 seconds\r\n                                audioEngine.unloadSample(sampleId)\r\n                                android.util.Log.i(\"MainActivity\", \"unloadSample($sampleId) called.\")\r\n                                val isLoadedAfterUnload = audioEngine.isSampleLoaded(sampleId)\r\n                                android.util.Log.i(\"MainActivity\", \"isSampleLoaded($sampleId) after unload: $isLoadedAfterUnload\")\r\n\r\n                            } else {\r\n                                android.util.Log.e(\"MainActivity\", \"Failed to load sample $sampleId. Cannot test playback.\")\r\n                            }\r\n                        }\r\n                    } else {\r\n                        android.util.Log.e(\"MainActivity\", \"Failed to copy asset $assetName to cache. Cannot test sample loading.\")\r\n                    }\r\n\r\n                } else {\r\n                    android.util.Log.e(\"MainActivity\", \"AudioEngine initialization failed.\")\r\n                }\r\n            } catch (e: Exception) {\r\n                android.util.Log.e(\"MainActivity\", \"Exception during AudioEngine initialization: ${e.message}\", e)\r\n            }\r\n        }\r\n\r\n        setContent {\r\n            TheOneTheme {\r\n                // A surface container using the 'background' color from the theme\r\n                // If Scaffold was used, it can be kept or replaced by Surface as needed.\r\n                // For simplicity, using Surface as in the example.\r\n                Surface(\r\n                    modifier = Modifier.fillMaxSize(),\r\n                    color = MaterialTheme.colorScheme.background\r\n                ) {\r\n                    // The original Greeting call was inside a Scaffold with padding.\r\n                    // Replicating a simple Greeting call here. Adjust as necessary.\r\n                    Greeting(\"Android\", modifier = Modifier.padding(16.dp)) // Example padding\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    override fun onDestroy() {\r\n        super.onDestroy()\r\n        // android.util.Log.i for clarity, though `Log` is imported\r\n        android.util.Log.i(\"MainActivity\", \"onDestroy called, preparing to shutdown AudioEngine.\")\r\n        if (::audioEngine.isInitialized) { // Check if audioEngine has been initialized\r\n             CoroutineScope(Dispatchers.IO).launch {\r\n                audioEngine.shutdown()\r\n                android.util.Log.i(\"MainActivity\", \"AudioEngine shutdown complete. IsInitialized: ${audioEngine.isInitialized()}\")\r\n            }\r\n        }\r\n    }\r\n}\r\n\r\n@Composable\r\nfun Greeting(name: String, modifier: Modifier = Modifier) {\r\n    Text(\r\n        text = \"Hello $name!\",\r\n        modifier = modifier\r\n    )\r\n}\r\n\r\n@Preview(showBackground = true)\r\n@Composable\r\nfun GreetingPreview() {\r\n    TheOneTheme {\r\n        Greeting(\"Android\")\r\n    }\r\n}
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/app/src/main/java/com/high/theone/MainActivity.kt b/app/src/main/java/com/high/theone/MainActivity.kt
--- a/app/src/main/java/com/high/theone/MainActivity.kt	(revision 0ff3108e300a6350d6979d3985679d7fcfd140c2)
+++ b/app/src/main/java/com/high/theone/MainActivity.kt	(date 1749056172678)
@@ -303,7 +303,7 @@
                 } else {
                     android.util.Log.e("MainActivity", "AudioEngine initialization failed.")
                 }
-            } catch (e: Exception) {
+            } catch (e Exception) {
                 android.util.Log.e("MainActivity", "Exception during AudioEngine initialization: ${e.message}", e)
             }
         }
